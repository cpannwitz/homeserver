version: "3.8"

networks:
  traefik:
    external: true
  auth:
    external: true
  monitoring:
    external: true
  ghost:
    external: true

volumes:
  autheliaredis-storage: {}
  autheliapg-storage: {}
  portainer-storage: {}
  prometheus-storage: {}
  grafana-storage: {}
  ghostdb-storage: {}

services:
  # ========================================================================= #
  #                                 AUTHENTICATION
  # ========================================================================= #

  authelia:
    container_name: authelia
    image: authelia/authelia
    user: "${PUID}:${PGID}"
    restart: unless-stopped
    depends_on:
      - autheliapg
      - autheliaredis
    volumes:
      - ./authelia:/config
    networks:
      - traefik
      - auth
    environment:
      - TZ
      - AUTHELIA_JWT_SECRET_FILE=/config/secrets/authelia_jwt
      - AUTHELIA_SESSION_SECRET_FILE=/config/secrets/authelia_session
      - AUTHELIA_NOTIFIER_SMTP_PASSWORD_FILE=/config/secrets/authelia_smtp
      - AUTHELIA_STORAGE_POSTGRES_PASSWORD_FILE=/config/secrets/authelia_postgres
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.authelia.rule=Host(`login.${DOMAIN}`)"
      - "traefik.http.routers.authelia.entrypoints=websecure"
      - "traefik.http.routers.authelia.tls.certresolver=letsencrypt"
      - "traefik.http.routers.authelia.service=authelia-svc"
      - "traefik.http.services.authelia-svc.loadbalancer.server.port=9091"
      # Custom Authelia_Traefik-Labels forwarding auth headers information
      - "traefik.http.middlewares.authelia.forwardauth.address=http://authelia:9091/api/verify?rd=https://login.${DOMAIN}/"
      - "traefik.http.middlewares.authelia.forwardauth.trustForwardHeader=true"
      - "traefik.http.middlewares.authelia.forwardauth.authResponseHeaders=Remote-User, Remote-Groups, Remote-Name, Remote-Email"

  autheliapg:
    container_name: autheliapg
    image: postgres:alpine
    restart: unless-stopped
    volumes:
      - autheliapg-storage:/var/lib/postgresql/data
    networks:
      - auth
    environment:
      - TZ
      - POSTGRES_PASSWORD=${AUTHELIA_PG_PASSWORD}
      - POSTGRES_USER=authelia
      - POSTGRES_DB=authelia

  autheliaredis:
    container_name: autheliaredis
    image: redis:alpine
    restart: unless-stopped
    volumes:
      - autheliaredis-storage:/data
    networks:
      - auth
    environment:
      - TZ

  # ========================================================================= #
  #                                 REVERSE PROXY
  # ========================================================================= #

  traefik:
    container_name: traefik
    image: traefik:v2.3
    restart: unless-stopped
    depends_on:
      - authelia
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik/acme.json:/acme.json
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml
      - ./traefik/access.log:/var/log/traefik/access.log
    networks:
      - traefik
    environment:
      - TZ
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN}`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.middlewares=authelia@docker"

  # ========================================================================= #
  #                                 MONITORING
  # ========================================================================= #

  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    restart: unless-stopped
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus-storage:/prometheus
    networks:
      - traefik
      - monitoring
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.${DOMAIN}`)"
      - "traefik.http.routers.prometheus.entrypoints=websecure"
      - "traefik.http.routers.prometheus.tls.certresolver=letsencrypt"
      - "traefik.http.routers.prometheus.middlewares=authelia@docker"
      - "traefik.http.routers.prometheus-svc.service=prometheus-svc"
      - "traefik.http.services.prometheus-svc.loadbalancer.server.port=9090"

  alertmanager:
    container_name: alertmanager
    image: prom/alertmanager:latest
    restart: unless-stopped
    command:
      - "--config.file=/etc/alertmanager/config.yml"
      - "--storage.path=/alertmanager"
    volumes:
      - ./alertmanager:/etc/alertmanager
    networks:
      - traefik
      - monitoring
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.alertmanager.rule=Host(`alertmanager.${DOMAIN}`)"
      - "traefik.http.routers.alertmanager.entrypoints=websecure"
      - "traefik.http.routers.alertmanager.tls.certresolver=letsencrypt"
      - "traefik.http.routers.alertmanager.middlewares=authelia@docker"
      - "traefik.http.routers.alertmanager-svc.service=alertmanager-svc"
      - "traefik.http.services.alertmanager-svc.loadbalancer.server.port=9093"

  nodeexporter:
    container_name: nodeexporter
    image: prom/node-exporter:latest
    restart: unless-stopped
    command:
      - "--path.procfs=/host/proc"
      - "--path.rootfs=/rootfs"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)"
    networks:
      - monitoring
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro

  cadvisor:
    container_name: cadvisor
    image: zcube/cadvisor:v0.37.5
    restart: unless-stopped
    networks:
      - monitoring
    environment:
      - TZ
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.cadvisor.rule=Host(`cadvisor.${DOMAIN}`)"
      - "traefik.http.routers.cadvisor.entrypoints=websecure"
      - "traefik.http.routers.cadvisor.tls.certresolver=letsencrypt"
      - "traefik.http.routers.cadvisor.middlewares=authelia@docker"
      - "traefik.http.routers.cadvisor-svc.service=cadvisor-svc"
      - "traefik.http.services.cadvisor-svc.loadbalancer.server.port=8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    restart: unless-stopped
    user: "${PUID}:${PGID}"
    depends_on:
      - prometheus
      - traefik
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini
    networks:
      - traefik
      - monitoring
    environment:
      - TZ
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_LOG_LEVEL='debug'
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.${DOMAIN}`)"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"
      - "traefik.http.routers.grafana.middlewares=authelia@docker"
      - "traefik.http.routers.grafana-svc.service=grafana-svc"
      - "traefik.http.services.grafana-svc.loadbalancer.server.port=3000"

  # ========================================================================= #
  #                                 SERVICES
  # ========================================================================= #

  ghost:
    container_name: ghost
    image: ghost:4-alpine
    restart: unless-stopped
    depends_on:
      - traefik
      - ghostdb
    networks:
      - traefik
      - ghost
    environment:
      - TZ
      - url="https://blog.${DOMAIN}"
      - database__client=mysql
      - database__connection__host=ghostdb
      - database__connection__database=${GHOSTDB_DB}
      - database__connection__user=${GHOSTDB_USER}
      - database__connection__password=${GHOSTDB_PASSWORD}
    volumes:
      - ./ghost:/var/lib/ghost/content
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ghost.rule=Host(`blog.${DOMAIN}`)"
      - "traefik.http.routers.ghost.entrypoints=websecure"
      - "traefik.http.routers.ghost.tls.certresolver=letsencrypt"
      # - "traefik.http.routers.ghost.middlewares=authelia@docker"
      - "traefik.http.routers.ghost-svc.service=ghost-svc"
      - "traefik.http.services.ghost-svc.loadbalancer.server.port=2368"

  ghostdb:
    container_name: ghostdb
    image: mariadb:10.5
    restart: unless-stopped
    networks:
      - ghost
    environment:
      - MYSQL_ROOT_PASSWORD=${GHOSTDB_PASSWORD}
      - MYSQL_USER=${GHOSTDB_USER}
      - MYSQL_PASSWORD=${GHOSTDB_PASSWORD}
      - MYSQL_DATABASE=${GHOSTDB_DB}
    volumes:
      - ghostdb-storage:/var/lib/mysql
